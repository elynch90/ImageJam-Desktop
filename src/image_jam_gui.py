# include dependencies
import PySimpleGUI as sg
import base64
import numpy as np
import tkinter as tk
from image_jam import invert_img, save_img, upload_img, image_subupdate

# lets clean this up as a class instead of this mess


class ImageJamGUI:
    """ImageJam GUI class
    --------------------
    This class is responsible for the GUI of the ImageJam application.
    It is responsible for the creation of the GUI window and the
    event loop that runs the application."""
    "its sad when we love people who dont love us back, but its worse when we love people who dont love themselves. - spacewaves"

    def __init__(self, img_w=700, img_h=550) -> None:
        # some useful variables
        self.img_w = img_w  # DEFAULT IMG WIDTH
        self.img_h = img_h  # DEFAULT IMG HEIGHT
        self.alpha = 255
        self.invert_flag = False  # COLOR INVERSION FLAG

        # set color theme
        # sg.theme('darkteal5')
        # py simple gui layout as generated by nested list
        self.gui_layout = [
            [sg.Text('ImageJam by spacewaves', font=220,
                     text_color="Silver")],
            [sg.Text('Import Image: '), sg.Input(), sg.FileBrowse(),
             sg.Button('Upload Image', key='UPLOAD_IMG')],
            [sg.Image("", size=(img_w, img_h),
             # set the key in order to access the
                      # window element during the runtime loop
                      key="MAIN_IMG", pad=(20, 20))],
            [sg.Text('Red'), sg.Slider([0, 255], orientation="horizontal",
                                       default_value=0, key='rSlider')],
            [sg.Text('Green'), sg.Slider([0, 255],
                                         orientation="horizontal",
                                         default_value=0, key='gSlider')],
            [sg.Text('Blue'), sg.Slider([0, 255],
                                        orientation="horizontal",
                                        default_value=0, key='bSlider')],
            [sg.Text('Alpha'), sg.Slider([0, 255],
                                         orientation="horizontal", default_value=0, key='alphaSlider')],
            [sg.Button('Invert', key='INVERT')],
            [sg.Button('Advanced', key='ADVANCED'),
             sg.Button("Save as", key='SAVE')],
            [sg.Text(key="SAVEDIR")],
            [sg.Text('copyright heady studios 2020',
                     font=220, text_color="Silver")]]
        # create the main window for the gui
        self.window = sg.Window("ImageJam", self.gui_layout, margins=(100, 50))

    def run(self) -> None:
        """Run the GUI event loop"""
        # init
        r_prev = 0  # PREVIOUS VALUES TO CHECK FOR PARAMETER CHANGE
        g_prev = 0
        b_prev = 0
        # Event Loop to process "events" and get the "values" of the inputs
        while True:
            event, values = self.window.read(timeout=100)
            if values[0] != '':
                # set the current image path
                cur_filepath = values[0]
                r_val, g_val = values['rSlider'], values['gSlider']
                b_val = values['bSlider']
                if r_val != r_prev or g_val != g_prev or b_val != b_prev:
                    image_subupdate(
                        r_val, g_val, b_val, self.alpha,
                        self.img_w, self.img_h, self.invert_flag, self.window
                    )
                r_prev, g_prev, b_prev = r_val, g_val, b_val
            if event == 'INVERT':
                invert_img(
                    r_val, g_val, b_val, self.alpha, 
                    self.img_w, self.img_h, self.window
                )
            if event == 'UPLOAD_IMG' and cur_filepath not in ['', ' ']:
                upload_img(
                    cur_filepath, r_val, g_val, b_val, self.alpha,
                    self.img_w, self.img_h, self.invert_flag, self.window)

            # slider colorizer listener awaiting changes to slider values
            # save image event
            if event == "SAVE":
                save_img(cur_filepath, r_val, g_val, b_val,
                         self.alpha, self.invert_flag, self.window)
            # if user closes window or clicks cancel
            if event == sg.WIN_CLOSED or event == 'Cancel':
                break
        # on exit
        self.window.close()
