import PySimpleGUI as sg
import ImageJam
import base64
import numpy as np
# some useful variables
img_w = 500
img_h = 500
r_prev = 0
g_prev = 0
b_prev = 0
invert_flag = False

# set color theme
# sg.theme('darkteal5')
# py simple gui layout as generated by nested list
gui_layout = [[sg.Text('ImageJam by spacewaves', font=220, text_color="Silver")],
              [sg.Text('Import Image: '), sg.Input(), sg.FileBrowse(), sg.Button('Upload Image', key='UPLOAD_IMG')],
              [sg.Text('Red'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='rSlider')],
              [sg.Text('Green'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='gSlider')],
              [sg.Text('Blue'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='bSlider')],
              [sg.Text('Alpha'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='alphaSlider')],
              [sg.Button('Invert', key='INVERT')],
              [sg.Image("", size=(img_w, img_h), key="MAIN_IMG", pad=(20, 20))],  # set the key in order to access the window element during the runtime loop
              [sg.Button('Advanced', key='ADVANCED'), sg.SaveAs(key='SAVE_PATH')],
              [sg.Text('copyright heady studios 2020', font=220, text_color="Silver")]]


# create the main window for the gui
window = sg.Window("ImageJam", gui_layout, margins=(100, 50))

def image_subupdate(cur_filepath, r_val, g_val, b_val, alpha, invert_flag):
     # pass the current slider values to the colorizer
            image_update = ImageJam.set_color(cur_filepath, r_val, g_val, b_val, alpha, invert_flag)
            image_update.save('cur_img', format="png")
            # convert the image to base64 representation
            # cur_img_64 = base64.b64encode(np.asarray(image_update))
            # update the gui image
            window.Element('MAIN_IMG').update('cur_img', size=(img_w, img_h))
            # get rid of these
            # print(r_val, g_val, b_val)
            # if event == 'rSlider' or event == 'gSlider' or event == 'bSlider':

# Event Loop to process "events" and get the "values" of the inputs
while True:
    event, values = window.read(timeout=100)
    if values[0] != '':
        # set the current image path
        cur_filepath = values[0]
        # r_val, g_val, b_val = values['ColorR'], values['ColorG'], values['ColorB']  # get the current slider values
        r_val, g_val, b_val, alpha = values['rSlider'], values['gSlider'], values['bSlider'], values['alphaSlider']
        if r_val != r_prev or g_val != g_prev or b_val != b_prev:
           image_subupdate(cur_filepath, r_val, g_val, b_val, alpha, invert_flag)
        r_prev, g_prev, b_prev = r_val, g_val, b_val
    if event == 'INVERT':
        invert_flag = not(invert_flag)
        image_subupdate(cur_filepath, r_val, g_val, b_val, alpha, invert_flag)
    if event == 'UPLOAD_IMG' and cur_filepath != ' ':
        window.Element('MAIN_IMG').update(cur_filepath, size=(img_w, img_h))  # display current image with resize formatiting
    # slider colorizer listener awaiting changes to slider values
    # save image event
    if event == "SAVE_PATH":
        image_update.save(values["SAVE_PATH"], format="png")  # save the image to the given  filepath

    if event == sg.WIN_CLOSED or event == 'Cancel':  # if user closes window or clicks cancel
        break
# on exit
window.close()
