# DEPENDENCIES
import PySimpleGUI as sg
import base64
import numpy as np
<<<<<<< Updated upstream
=======
import tkinter as tk
from ImageJam import invert_img, save_img, upload_img, image_subupdate


>>>>>>> Stashed changes
# some useful variables
img_w = 700 # DEFAULT IMG WIDTH
img_h = 550 # DEFAULT IMG HEIGHT
r_prev = 0 # PREVIOUS VALUES TO CHECK FOR PARAMETER CHANGE
g_prev = 0
b_prev = 0
<<<<<<< Updated upstream
=======
invert_flag = False # COLOR INVERSION FLAG

>>>>>>> Stashed changes
# set color theme
# sg.theme('darkteal5')
# py simple gui layout as generated by nested list
gui_layout = [[sg.Text('ImageJam by spacewaves', font=220, text_color="Silver")],
              [sg.Text('Import Image: '), sg.Input(), sg.FileBrowse(), sg.Button('Upload Image', key='UPLOAD_IMG')],
<<<<<<< Updated upstream
              [sg.Text('Red Value'), sg.Slider([-100, 100], orientation="horizontal", default_value=0, key='rSlider')],
              [sg.Text('Green Value'), sg.Slider([-100, 100], orientation="horizontal", default_value=0, key='gSlider')],
              [sg.Text('Blue Value'), sg.Slider([-100, 100], orientation="horizontal", default_value=0, key='bSlider')],
              [sg.Image("test_img.png", size=(img_w, img_h), key="MAIN_IMG", pad=(20, 20))],  # set the key in order to access the window element during the runtime loop
              [sg.Button('Advanced')],
=======
              [sg.Image("", size=(img_w, img_h), key="MAIN_IMG", pad=(20, 20))],  # set the key in order to access the window element during the runtime loop
              [sg.Text('Red'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='rSlider')],
              [sg.Text('Green'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='gSlider')],
              [sg.Text('Blue'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='bSlider')],
              [sg.Text('Alpha'), sg.Slider([-255, 255], orientation="horizontal", default_value=0, key='alphaSlider')],
              [sg.Button('Invert', key='INVERT')],
              [sg.Button('Advanced', key='ADVANCED'), sg.Button("Save as", key='SAVE')],
              [sg.Text(key="SAVEDIR")],
>>>>>>> Stashed changes
              [sg.Text('copyright heady studios 2020', font=220, text_color="Silver")]]


# create the main window for the gui
window = sg.Window("ImageJam", gui_layout, margins=(100, 50))

# Event Loop to process "events" and get the "values" of the inputs
while True:
    event, values = window.read(timeout=100)
    if values[0] != '':
        # set the current image path
        cur_filepath = values[0]
        # r_val, g_val, b_val = values['ColorR'], values['ColorG'], values['ColorB']  # get the current slider values
        r_val, g_val, b_val = values['rSlider'], values['gSlider'], values['bSlider']
        if r_val != r_prev or g_val != g_prev or b_val != b_prev:
<<<<<<< Updated upstream
            # pass the current slider values to the colorizer
            image_update = ImageJam.set_color(cur_filepath, r_val, g_val, b_val)
            print(image_update)
            image_update.save('cur_img', format="png")
            # convert the image to base64 representation
            # cur_img_64 = base64.b64encode(np.asarray(image_update))
            # update the gui image
            window.Element('MAIN_IMG').update('cur_img', size=(img_w, img_h))
            # get rid of these
            #print(r_val, g_val, b_val)
            # if event == 'rSlider' or event == 'gSlider' or event == 'bSlider':
        r_prev, g_prev, b_prev = r_val, g_val, b_val
    if event == 'UPLOAD_IMG' and cur_filepath != ' ':
        window.Element('MAIN_IMG').update(cur_filepath)
    # slider colorizer listener awaiting changes to slider values

=======
           image_subupdate(cur_filepath, r_val, g_val, b_val, alpha, img_w, img_h, invert_flag, window)
        r_prev, g_prev, b_prev = r_val, g_val, b_val
    if event == 'INVERT':
        invert_img(cur_filepath, r_val, g_val, b_val, alpha, img_w, img_h, invert_flag)
    if event == 'UPLOAD_IMG' and cur_filepath != ' ':
       upload_img(cur_filepath, r_val, g_val, b_val, alpha, img_w, img_h, invert_flag, window)

    # slider colorizer listener awaiting changes to slider values
    # save image event
    if event == "SAVE":
        save_img(cur_filepath, r_val, g_val, b_val, alpha, invert_flag, window)
>>>>>>> Stashed changes
    if event == sg.WIN_CLOSED or event == 'Cancel':  # if user closes window or clicks cancel
        break
# on exit
window.close()